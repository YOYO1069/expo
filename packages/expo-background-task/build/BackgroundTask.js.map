{"version":3,"file":"BackgroundTask.js","sourceRoot":"","sources":["../src/BackgroundTask.ts"],"names":[],"mappings":"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","sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\n\nimport {\n  BackgroundTaskExecutor,\n  BackgroundTaskInfoStatus,\n  BackgroundTaskOptions,\n  BackgroundTaskStatus,\n  BackgroundTaskType,\n} from './BackgroundTask.types';\nimport * as BackgroundTaskRepositiory from './BackgroundTaskRepository';\nimport ExpoBackgroundTaskModule from './ExpoBackgroundTaskModule';\n\n// Export types\nexport {\n  BackgroundTaskStatus,\n  BackgroundTaskInfoStatus,\n  BackgroundTaskInfo,\n  BackgroundTaskType,\n  BackgroundTaskLogEntry,\n} from './BackgroundTask.types';\n\nconst initialize = async () => {\n  // Tell the native module we're ready to receive events\n  if (!ExpoBackgroundTaskModule.initialiseFromJS) {\n    throw new UnavailabilityError('BackgroundTask', 'initialiseFromJS');\n  }\n\n  console.log('BackgroundTask: Initializing from JS');\n  ExpoBackgroundTaskModule.initialiseFromJS();\n\n  // Start worker if it's not running and we have tasks registered\n  console.log('BackgroundTask: Checking if we have any scheduled tasks');\n  BackgroundTaskRepositiory.getScheduledTaskInfos().then((taskInfos) => {\n    if (taskInfos.length > 0) {\n      console.log(`BackgroundTask: ${taskInfos.length} tasks scheduled`);\n      ExpoBackgroundTaskModule.isWorkerRunningAsync().then((isRunning) => {\n        if (!isRunning) {\n          console.log('BackgroundTask: Starting worker');\n          ExpoBackgroundTaskModule.startWorkerAsync().then(() => {\n            console.log('BackgroundTask: worker running');\n          });\n        } else {\n          console.log('BackgroundTask: worker running');\n        }\n      });\n    } else {\n      console.log('BackgroundTask: No tasks found on startup.');\n      ExpoBackgroundTaskModule.isWorkerRunningAsync().then((isRunning) => {\n        if (isRunning) {\n          console.log('BackgroundTask: Stopping worker, we have no scheduled tasks.');\n          ExpoBackgroundTaskModule.stopWorkerAsync().then(() => {\n            console.log('BackgroundTask: worker stopped');\n          });\n        } else {\n          console.log('BackgroundTask: worker not running');\n        }\n      });\n    }\n  });\n};\n\n// @needsAudit\n/**\n * defines the list of tasks used to store background tasks\n */\nconst tasks: Map<string, BackgroundTaskExecutor> = new Map<string, BackgroundTaskExecutor>();\n\n// @needsAudit\n/**\n * Creates a new backgound task\n * @param taskIdentifier Identifier of the task\n * @param taskExecutor Executor for the task\n */\nexport const createTask = (taskIdentifier: string, taskExecutor: BackgroundTaskExecutor) => {\n  console.log('BackgroundTask.createTask', { taskIdentifier });\n  tasks.set(taskIdentifier, taskExecutor);\n};\n\n// @needsAudit\n/**\n * Schedules a registered task\n * @param taskIdentifier\n * @param options\n */\nexport const scheduleTaskAsync = async (taskIdentifier: string, options: BackgroundTaskOptions) => {\n  console.log('BackgroundTask.scheduleTaskAsync', { taskIdentifier, options });\n\n  if (!ExpoBackgroundTaskModule.startWorkerAsync) {\n    throw new UnavailabilityError('BackgroundTask', 'scheduleTaskAsync');\n  }\n\n  if (!ExpoBackgroundTaskModule.isWorkerRunningAsync) {\n    throw new UnavailabilityError('BackgroundTask', 'isWorkerRunningAsync');\n  }\n\n  if (!taskIdentifier || typeof taskIdentifier !== 'string') {\n    console.warn(\n      `BackgroundTask.scheduleTaskAsync: 'taskIdentifier' argument must be a non-empty string.`\n    );\n    return;\n  }\n\n  if (!tasks.has(taskIdentifier)) {\n    console.warn(`BackgroundTask.scheduleTaskAsync: Task '${taskIdentifier}' is not defined.`);\n    return;\n  }\n\n  // Schedule the task! meaning that we need to save info about the task being running\n  const taskInfo = await BackgroundTaskRepositiory.createScheduledTaskInfo(taskIdentifier, options);\n  console.info(`BackgroundTask.scheduleTaskAsync: Task '${taskInfo}' created.`);\n\n  // Start worker if it's not running\n  if (!(await ExpoBackgroundTaskModule.isWorkerRunningAsync())) {\n    console.log('BackgroundTask.scheduleTaskAsync: Starting native worker.');\n    await ExpoBackgroundTaskModule.startWorkerAsync();\n  }\n\n  // Add log item for the task\n  await BackgroundTaskRepositiory.addLogItem({\n    identifier: taskIdentifier,\n    date: Date.now(),\n    duration: 0,\n    status: BackgroundTaskInfoStatus.Enqueued,\n  });\n};\n\n// @needsAudit\n/**\n * Cancels a scheduled task by its identifier\n *\n * @param taskIdentifier Identifier of task to cancel\n */\n\nexport const cancelScheduledTaskAsync = async (taskIdentifier: string) => {\n  console.log('BackgroundTask.cancelTaskAsync', { taskIdentifier });\n\n  if (!taskIdentifier || typeof taskIdentifier !== 'string') {\n    console.warn(\n      `BackgroundTask.cancelTaskAsync: 'taskIdentifier' argument must be a non-empty string.`\n    );\n    return;\n  }\n  // Get the task info\n  const taskInfo = await BackgroundTaskRepositiory.getScheduledTaskInfo(taskIdentifier);\n  if (!taskInfo) {\n    console.warn(`BackgroundTask.cancelTaskAsync: Task '${taskIdentifier}' is not scheduled.`);\n    return;\n  }\n\n  // Delete the task\n  await deleteTaskAsync(taskIdentifier);\n\n  // Add log item for the task\n  await BackgroundTaskRepositiory.addLogItem({\n    identifier: taskIdentifier,\n    date: Date.now(),\n    duration: 0,\n    status: BackgroundTaskInfoStatus.Cancelled,\n  });\n};\n\n// @needsAudit\n/**\n * Returns the status for the Background Task API. On web, it always returns `BackgroundTaskStatus.Restricted`,\n * while on native platforms it returns `BackgroundTaskStatus.Available`. There is\n *\n * @returns A BackgroundTaskStatus enum value or null if not available.\n */\nexport const getStatusAsync = async (): Promise<BackgroundTaskStatus> => {\n  if (!ExpoBackgroundTaskModule.getStatusAsync) {\n    throw new UnavailabilityError('BackgroundTask', 'getStatusAsync');\n  }\n\n  return ExpoBackgroundTaskModule.getStatusAsync();\n};\n\n// @needsAudit\n/**\n * Checks whether the task is registered using the createTask method\n *\n * @param taskIdentifier Identifier of task to check\n */\nexport const isTaskRegisteredAsync = async (taskIdentifier: string): Promise<boolean> => {\n  return tasks.has(taskIdentifier);\n};\n\n// @needsAudit\n/**\n * Returns true if the task is scheduled. By is scheduled we mean that the task is scheduled to\n * run in the future.\n * @param taskIdentifier Identifier of the task to check\n * @returns True if the task is scheduled\n */\nexport const isTaskScheduled = async (taskIdentifier: string): Promise<boolean> => {\n  if (!isTaskRegisteredAsync(taskIdentifier)) {\n    console.warn(\n      `Task with identifier ${taskIdentifier} is not registered. Use createTask to register the task.`\n    );\n  }\n\n  return (await BackgroundTaskRepositiory.getScheduledTaskInfo(taskIdentifier)) != null;\n};\n\n/**\n * Returns task log from the task repository for a given task\n * @param taskIdentifier Identifier of the task to get log\n * @returns Task log\n */\nexport const getTaskLogItems = async (taskIdentifier: string) => {\n  if (!taskIdentifier || typeof taskIdentifier !== 'string') {\n    console.warn(\n      `BackgroundTask.getTaskInfoLog: 'taskIdentifier' argument must be a non-empty string.`\n    );\n    return;\n  }\n\n  return (await BackgroundTaskRepositiory.getLogItems()).filter(\n    (t) => t.identifier === taskIdentifier\n  );\n};\n\n/**\n * Returns task log from the task repository for a given task\n * @returns Task log\n */\nexport const getLogItems = async () => {\n  return await BackgroundTaskRepositiory.getLogItems();\n};\n\n/**\n * Returns the task info from the task repository\n * @param taskIdentifier Identifier of the task to get info for\n * @returns Task info or null if not found\n */\nexport const getScheduledTaskInfo = async (taskIdentifier: string) => {\n  if (!taskIdentifier || typeof taskIdentifier !== 'string') {\n    console.warn(\n      `BackgroundTask.getTaskInfoLog: 'taskIdentifier' argument must be a non-empty string.`\n    );\n    return;\n  }\n\n  return await BackgroundTaskRepositiory.getScheduledTaskInfo(taskIdentifier);\n};\n\n/**\n * Returns all task infos from the task repository\n * @returns List of Task infos\n */\nexport const getScheduledTaskInfos = async () => {\n  return await BackgroundTaskRepositiory.getScheduledTaskInfos();\n};\n\n// @needsAudit\n/**\n * Returns true/false if the background task worker is active.\n *\n * @returns True if the worker is running\n */\nexport const isWorkerRunning = (): Promise<boolean> => {\n  if (!ExpoBackgroundTaskModule.isWorkerRunningAsync) {\n    throw new UnavailabilityError('BackgroundTask', 'isWorkerRunningAsync');\n  }\n  return ExpoBackgroundTaskModule.isWorkerRunningAsync();\n};\n\n// @needsAudit\n/**\n * Clears up the repository of scheduled tasks with logs\n */\nexport const clearScheduledTasks = async () => {\n  console.log('BackgroundTask.cleanScheduledTasks');\n\n  if (!ExpoBackgroundTaskModule.stopWorkerAsync) {\n    throw new UnavailabilityError('BackgroundTask', 'stopWorkerAsync');\n  }\n\n  if (!ExpoBackgroundTaskModule.isWorkerRunningAsync) {\n    throw new UnavailabilityError('BackgroundTask', 'isWorkerRunningAsync');\n  }\n\n  await BackgroundTaskRepositiory.clearScheduledTasks();\n\n  // Stop worker if running\n  if (await ExpoBackgroundTaskModule.isWorkerRunning()) {\n    await ExpoBackgroundTaskModule.stopWorkerAsync();\n  }\n};\n\n// @needsAudit\n/**\n * Cleans up the repository of scheduled tasks with logs\n */\nexport const clearTaskLog = async () => {\n  console.log('BackgroundTask.cleanScheduledTasks');\n\n  if (!ExpoBackgroundTaskModule.stopWorkerAsync) {\n    throw new UnavailabilityError('BackgroundTask', 'stopWorkerAsync');\n  }\n\n  if (!ExpoBackgroundTaskModule.isWorkerRunningAsync) {\n    throw new UnavailabilityError('BackgroundTask', 'isWorkerRunningAsync');\n  }\n\n  await BackgroundTaskRepositiory.clearTaksLog();\n};\n\n/**\n * Internal method for deleting a scheduled task\n * @param taskIdentifier Identifier of the task to stop\n */\nconst deleteTaskAsync = async (taskIdentifier: string) => {\n  console.log('BackgroundTask.deleteTaskAsync', { taskIdentifier });\n\n  if (!ExpoBackgroundTaskModule.stopWorkerAsync) {\n    throw new UnavailabilityError('BackgroundTask', 'stopWorkerAsync');\n  }\n\n  if (!ExpoBackgroundTaskModule.workFinished) {\n    throw new UnavailabilityError('BackgroundTask', 'workFinished');\n  }\n\n  if (!ExpoBackgroundTaskModule.isWorkerRunningAsync) {\n    throw new UnavailabilityError('BackgroundTask', 'isWorkerRunningAsync');\n  }\n\n  if (!taskIdentifier || typeof taskIdentifier !== 'string') {\n    console.warn(\n      `BackgroundTask.stopTaskAsync: 'taskIdentifier' argument must be a non-empty string.`\n    );\n    return;\n  }\n\n  // Remove from repository\n  const deletedTasks = await BackgroundTaskRepositiory.deleteScheduledTaskInfo(taskIdentifier);\n  console.log('BackgroundTask.deleteTaskAsync', 'deleted tasks:', deletedTasks.length);\n\n  // Stop the worker task if there are no task scheduled\n  if (\n    (await BackgroundTaskRepositiory.getScheduledTaskInfos()).length === 0 &&\n    (await ExpoBackgroundTaskModule.isWorkerRunningAsync())\n  ) {\n    console.log('BackgroundTask.cancelTaskAsync: Stopping worker as there are no tasks scheduled.');\n    await ExpoBackgroundTaskModule.stopWorkerAsync();\n  }\n};\n\n// @needsAudit\n/**\n * Adds a listener for the onPerformWork event\n * @param cb Callback to be called when the event is triggered\n * @returns An unsubscribe method\n */\nexport const addOnWorkListener = (cb: () => void) => {\n  if (ExpoBackgroundTaskModule.EVENT_WORK_DONE !== 'onWorkDone') {\n    throw new Error(\n      \"Expected 'onWorkDone' got '\" +\n        ExpoBackgroundTaskModule.EVENT_WORK_DONE +\n        \"' when adding event listener.\"\n    );\n  }\n\n  return ExpoBackgroundTaskModule.addListener('onWorkDone', cb);\n};\n\n/**\n * Set up event emitter for the Background Task Manager\n */\nif (ExpoBackgroundTaskModule) {\n  console.log(\n    'BackgroundTask: Setting up event listener for',\n    ExpoBackgroundTaskModule.EVENT_PERFORM_WORK\n  );\n\n  // Ensure all events have the correct names from our types\n  if (ExpoBackgroundTaskModule.EVENT_PERFORM_WORK !== 'onPerformWork') {\n    throw new Error(\n      \"Expected 'onPerformWork' got '\" +\n        ExpoBackgroundTaskModule.EVENT_PERFORM_WORK +\n        \"' when adding event listener.\"\n    );\n  }\n\n  // Listen to the onPerformWork event\n  ExpoBackgroundTaskModule.addListener('onPerformWork', async () => {\n    // We are notified by our native module that we can perform some work.\n    // Lets check if we have any tasks to run.\n    console.log(`BackgroundTask.${ExpoBackgroundTaskModule.EVENT_PERFORM_WORK}`, {\n      taskCount: tasks.size,\n    });\n\n    try {\n      tasks.forEach(async (taskExecutor, taskIdentifier) => {\n        const start = Date.now();\n        let error: string | null = null;\n        try {\n          await taskExecutor();\n        } catch (e) {\n          error = JSON.stringify(e);\n        }\n\n        const end = Date.now();\n\n        // Log\n        if (error !== null) {\n          console.error(`BackgroundTask.runTask: '${taskIdentifier}' failed: ${error}`);\n          BackgroundTaskRepositiory.addLogItem({\n            identifier: taskIdentifier,\n            date: start,\n            duration: end - start,\n            status: BackgroundTaskInfoStatus.Failed,\n            error,\n          });\n        } else {\n          console.log(`BackgroundTask.runTask: '${taskIdentifier}' completed in ${end - start}ms`);\n          BackgroundTaskRepositiory.addLogItem({\n            identifier: taskIdentifier,\n            date: start,\n            duration: end - start,\n            status: BackgroundTaskInfoStatus.Success,\n          });\n\n          // Check if this is a one-time task\n          const taskInfo = await BackgroundTaskRepositiory.getScheduledTaskInfo(taskIdentifier);\n          if (taskInfo && taskInfo.type === BackgroundTaskType.OneTime) {\n            // Remove the task\n            await deleteTaskAsync(taskIdentifier);\n\n            // Add log entry\n            BackgroundTaskRepositiory.addLogItem({\n              identifier: taskIdentifier,\n              date: start,\n              duration: end - start,\n              status: BackgroundTaskInfoStatus.Stopped,\n            });\n          }\n        }\n      });\n    } catch (e) {\n      console.log('Expo BackgroundTask: An error occurred while running the task', e);\n    }\n\n    // Tell the native module that we are done\n    await ExpoBackgroundTaskModule.workFinished();\n  });\n} else {\n  throw new UnavailabilityError('BackgroundTask', 'ExpoBackgroundTaskModule');\n}\n\n// Initialise the module\ninitialize();\n"]}