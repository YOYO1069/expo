{"version":3,"file":"BackgroundTaskRepository.js","sourceRoot":"","sources":["../src/BackgroundTaskRepository.ts"],"names":[],"mappings":"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","sourcesContent":["import AsyncStorage from '@react-native-async-storage/async-storage';\n\nimport {\n  BackgroundTaskInfo,\n  BackgroundTaskOptions,\n  BackgroundTaskLogEntry,\n} from './BackgroundTask.types';\n\nconst TASK_INFO_KEY = 'expo-background-task-info';\nconst TASK_LOG_KEY = 'expo-background-task-log';\n\nconst DEFAULT_INTERVAL_MINUTES = 60 * 24; // 24 hours - once every day\n\n// @needsAudit\n/**\n * Removes all tasks from the task repository\n * */\nexport const clearScheduledTasks = async () => {\n  console.info(\n    \"BackgroundTaskRepository.cleanTasks should only be called if you really know what you're doing.\"\n  );\n\n  console.log('BackgroundTaskRepository.cleanRepository');\n  await AsyncStorage.removeItem(TASK_INFO_KEY);\n};\n\n// @needsAudit\n/**\n * Removes all task log items from the task repository\n * */\nexport const clearTaksLog = async () => {\n  console.info(\n    \"BackgroundTaskRepository.cleanTaskLogItems should only be called if you really know what you're doing.\"\n  );\n\n  console.log('BackgroundTaskRepository.cleanRepository');\n  await AsyncStorage.removeItem(TASK_LOG_KEY);\n};\n\n// @needsAudit\n/**\n * When creating a new task, we need to save the task info to the database.\n * @param taskIdentifier Identifier of the task\n * @param options Options for the task\n * */\nexport const createScheduledTaskInfo = async (\n  taskIdentifier: string,\n  options: BackgroundTaskOptions\n) => {\n  console.log('BackgroundTaskRepository.createTaskInfo', { taskIdentifier });\n  if (!taskIdentifier || typeof taskIdentifier !== 'string') {\n    throw Error(\n      `BackgroundTask.createTaskInfo: 'taskIdentifier' argument must be a non-empty string.`\n    );\n  }\n\n  if (!options || typeof options !== 'object') {\n    throw Error(`BackgroundTask.saveTaskInfo: 'options' argument must be an object.`);\n  }\n\n  // Create task info\n  const taskInfo: BackgroundTaskInfo = {\n    intervalMinutes: DEFAULT_INTERVAL_MINUTES,\n    ...options,\n    taskIdentifier,\n  };\n\n  // Store task info\n  const currentList = JSON.parse(\n    (await AsyncStorage.getItem(TASK_INFO_KEY)) ?? '[]'\n  ) as BackgroundTaskInfo[];\n  currentList.push(taskInfo);\n  await AsyncStorage.setItem(TASK_INFO_KEY, JSON.stringify(currentList));\n  console.log('BackgroundTaskRepository.createTaskInfo - storing', { taskInfo });\n  return taskInfo;\n};\n\n/**\n * Returns all task infos from the task repository\n * @returns List of task infos\n */\nexport const getScheduledTaskInfos = async () => {\n  return JSON.parse((await AsyncStorage.getItem(TASK_INFO_KEY)) ?? '[]') as BackgroundTaskInfo[];\n};\n\nexport const getScheduledTaskInfo = async (taskIdentifier: string) => {\n  if (!taskIdentifier || typeof taskIdentifier !== 'string') {\n    throw Error(\n      `BackgroundTask.deleteTaskInfo: 'taskIdentifier' argument must be a non-empty string.`\n    );\n  }\n\n  const taskInfos = await getScheduledTaskInfos();\n  return taskInfos.find((t) => t.taskIdentifier === taskIdentifier) ?? null;\n};\n\n// @needsAudit\n/**\n * Cancels a scheduled task by its identifier\n * @param taskIdentifier Identifier of task to cancel\n * @returns Deleted item(s)\n */\nexport const deleteScheduledTaskInfo = async (taskIdentifier: string) => {\n  console.log('BackgroundTaskRepository.deleteTaskInfo', { taskIdentifier });\n  if (!taskIdentifier || typeof taskIdentifier !== 'string') {\n    throw Error(\n      `BackgroundTask.deleteTaskInfo: 'taskIdentifier' argument must be a non-empty string.`\n    );\n  }\n  // Delete from store!\n  const currentList = JSON.parse(\n    (await AsyncStorage.getItem(TASK_INFO_KEY)) ?? '[]'\n  ) as BackgroundTaskInfo[];\n\n  const deleted = currentList.splice(\n    currentList.findIndex((t) => t.taskIdentifier === taskIdentifier),\n    1\n  );\n\n  await AsyncStorage.setItem(TASK_INFO_KEY, JSON.stringify(currentList));\n  return deleted;\n};\n\n// @needsAudit\n/**\n * Logs task info to the task repository\n * @param taskRunInfo Task run info to log\n */\nexport const addLogItem = async (taskRunInfo: BackgroundTaskLogEntry) => {\n  console.log('BackgroundTaskRepository.addTaskInfoLog', { taskRunInfo });\n  if (!taskRunInfo || typeof taskRunInfo !== 'object') {\n    throw Error(`BackgroundTask.storeTaskInfoRunInfo: 'taskRunInfo' argument must be an object.`);\n  }\n\n  if (!taskRunInfo.identifier || typeof taskRunInfo.identifier !== 'string') {\n    throw Error(\n      `BackgroundTask.storeTaskInfoRunInfo: 'taskIdentifier' argument must be a non-empty string.`\n    );\n  }\n\n  // Store task run info\n  const currentList = JSON.parse(\n    (await AsyncStorage.getItem(TASK_LOG_KEY)) ?? '[]'\n  ) as BackgroundTaskLogEntry[];\n  currentList.push(taskRunInfo);\n  await AsyncStorage.setItem(TASK_LOG_KEY, JSON.stringify(currentList));\n};\n\n// @needsAudit\n/**\n * Returns the log for all tasks from the task repository\n * @returns Task run info log\n */\nexport const getLogItems = async () => {\n  const logListJson = (await AsyncStorage.getItem(TASK_LOG_KEY)) ?? '[]';\n  return JSON.parse(logListJson) as BackgroundTaskLogEntry[];\n};\n"]}